{{- range $item_name, $item := .Values.deployments }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $item_name }}
  labels:
    app.kubernetes.io/name: {{ $item_name }}
  namespace: {{ $.Release.Namespace }}
spec:
  replicas: {{ $item.replicaCount | default 1 }}
  revisionHistoryLimit: 1
  {{- if $item.strategy }}
  strategy:
    {{- $item.strategy | toYaml | nindent 4 }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ $item_name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ $item_name }}
        {{- if $item.labels -}}
        {{ $item.labels | toYaml | trunc 63 | nindent 8 }}
        {{- end }}
      annotations:
        {{- if $item.annotations -}}
        {{ $item.annotations | toYaml | nindent 8 }}
        {{- end }}
    spec:
      {{ if $.Values.nodeName }}
      nodeName: {{ $.Values.nodeName | quote }}
      {{- end }}
      {{ if $item.tolerations -}}
      tolerations:
      {{- $item.tolerations | toYaml | nindent 8 }}
      {{- end }}
      {{ if $.Values.nodeAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
              {{- range $affinity := $.Values.nodeAffinity }}
                - key: {{ $affinity.key }}
                  operator: In
                  values:
                  {{- range $affinityValue := $affinity.values }}
                    - {{ $affinityValue }}
                  {{- end }}
              {{- end }}
      {{- end }}
      serviceAccountName: {{- if $item.serviceAccountExternal }} {{ $item.serviceAccountExternal }}{{ else }}{{- if $item.serviceAccountName }} {{ $item.serviceAccountName }}{{ else }} {{ $item_name }}{{- end }}{{- end }}
      {{- if $item.initContainers }}
      initContainers:
      {{- range $init := $item.initContainers }}
        - name: {{ $init.name }}
          image: {{ $init.image }}
          {{- if $init.command }}
          command:
          {{- range $cmd := $init.command }}
            - {{ $cmd | quote }}
          {{- end }}
          {{- end }}

          {{- if $init.args }}
          args:
          {{- range $arg := $init.args }}
            - {{ $arg | quote }}
          {{- end }}
          {{- end }}

          {{- if $init.env }}
          env:
          {{- range $env := $init.env }}
            - name: {{ $env.name }}
              value: {{ $env.value | quote }}
          {{- end }}
          {{- end }}

          {{- if $init.volumeMounts }}
          volumeMounts:
          {{- range $vm := $init.volumeMounts }}
            - name: {{ $vm.name }}
              mountPath: {{ $vm.mountPath | quote }}
              {{- if $vm.readOnly }}
              readOnly: {{ $vm.readOnly }}
              {{- end }}
          {{- end }}
          {{- end }}

          {{- if $init.resources }}
          resources:
            {{- $init.resources | toYaml | nindent 12 }}
          {{- end }}
      {{- end }}
      {{- end }}
      containers:
        - name: {{ $item_name }}
          image: "{{ $item.image }}"
        {{- if $item.podSecurityContextRestricted }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsGroup: 1000
            runAsNonRoot: true
            runAsUser: 100
        {{- end }}
        {{- if $item.podSecurityContext }}
          securityContext:
          {{- $item.podSecurityContext | toYaml | nindent 12 }}
        {{- end }}
          imagePullPolicy: "Always"
          {{- if $item.command }}
          command:
            {{- $item.command | toYaml | nindent 12 }}
          {{- end }}
          {{- if $item.args }}
          args:
          {{- $item.args | toYaml | nindent 12 }}
          {{- end }}
          {{- if $item.ports }}
          ports:
          {{- range $itemPort := $item.ports }}
            - name: {{ $itemPort.name }}
              containerPort: {{ $itemPort.port }}
              {{- if $itemPort.hostPort }}
              hostPort: {{ $itemPort.hostPort }}
              {{- end }}
              protocol: TCP
          {{- end }}
          {{- end }}
          {{ if $item.resourcesSimple -}}
          resources:
            limits:
              memory: {{ mulf $item.resourcesSimple 1.7 }}Mi
            requests:
              cpu: {{ $item.resourcesSimple }}m
              memory: {{ mulf $item.resourcesSimple 1.2 }}Mi
          {{- end }}
          {{ if $item.resources -}}
          resources:
            {{- $item.resources | toYaml | nindent 12 }}
          {{- end }}
          {{ if $item.probesEnabled -}}
          livenessProbe:
            httpGet:
              path: "/health"
              port: http
              scheme: "HTTP"
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: http
              scheme: "HTTP"
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          {{- end -}}
          {{- if or ($item.env) ($item.mysqlEnvsEnabled) -}}
          env:
          {{- if $item.mysqlEnvsEnabled }}
            - name: MYSQL_HOST
              valueFrom:
                secretKeyRef:
                  name: secrets-sql
                  key: MYSQL_HOST
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: secrets-sql
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: secrets-sql
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets-sql
                  key: MYSQL_PASSWORD
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: secrets-sql
                  key: MYSQL_ROOT_PASSWORD
          {{- end }}
          {{- if $item.env }}
          {{- $item.env | toYaml | nindent 12 }}
          {{- end }}
          {{- end }}
    {{- if $item.volumes }}
          volumeMounts:
      {{- range $itemVolumes := $item.volumes }}
            - name: {{ $itemVolumes.name }}
              mountPath: {{ $itemVolumes.mountPath | quote }}
              readOnly: {{ $itemVolumes.readOnly | default false }}
              {{ if eq $itemVolumes.type "ConfigMap" -}}
              {{ if $itemVolumes.subPath -}}
              subPath: {{ $itemVolumes.subPath }}
              {{- end }}
              {{- end }}
      {{- end }}
    {{- end }}
    {{- if $item.volumeMountsFull }}
          volumeMounts:
          {{ $item.volumeMountsFull | toYaml | nindent 12 }}
    {{- end }}
    {{- if $item.volumesFull }}
      volumes:
        {{ $item.volumesFull | toYaml | nindent 8 }}
    {{ else }}
      volumes:
      {{- range $itemVolumes := $item.volumes }}
        - name: {{ $itemVolumes.name }}
        {{ if eq $itemVolumes.type "emptyDir" }}
          emptyDir: {}
        {{- end }}
        {{ if eq $itemVolumes.type "nfs" }}
          nfs:
            path: {{ $itemVolumes.path | quote}}
            server: {{ $itemVolumes.server | quote}}
        {{- end }}
        {{ if eq $itemVolumes.type "hostPath" }}
          hostPath:
            path: {{ $itemVolumes.hostPath | quote}}
        {{- end }}
        {{- if eq (include "listContains" (dict "list" (list "rook-cephfs" "csi-s3" "iscsi" "rook-ceph-block" "longhorn" "pvc" "truenas-nfs" "openebs-device" "openebs-hostpath") "value" $itemVolumes.type)) "true" }}
          persistentVolumeClaim:
            claimName: {{ $itemVolumes.name }}
            readOnly: {{ $itemVolumes.readOnly | default false }}
        {{- end }}
        {{ if eq $itemVolumes.type "ConfigMap" }}
          configMap:
            name: {{ $itemVolumes.name }}
        {{- end }}
        {{ if eq $itemVolumes.type "secret" }}
          secret:
            secretName: {{ $itemVolumes.name }}
            items:
              - key: {{ $itemVolumes.subPath }}
                path: {{ $itemVolumes.subPath }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- if $.Values.secretRegistry }}
      imagePullSecrets:
        - name: {{ $.Values.secretRegistry }}
    {{- end }}
{{- end }}
